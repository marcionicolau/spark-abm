<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN" "../DocBook/docbook-5.0/dtd/docbook.dtd">
<article>
	<info>
		<title>SPARK-PL Dictionary (1.2)</title>
		<author>
			<personname>Alexey Solovyev</personname>
		</author>
		<abstract>
			<para>
				A short description of all SPARK-PL commands. 
			</para>
		</abstract>
	</info>

	<sect1>
		<title>Constants</title>
		<sect2>
			<title>
				null
			</title>
			<para>
<programlisting>
null : $NullObject
</programlisting>
				The null object (reference). Can be used for testing results of some operations.
			</para>
			<para>
				Example
<programlisting>
	var a = self as GoodAgent
	if a != null
	[
		do-something
	]
</programlisting>
			</para>
		</sect2>
		
		
		<sect2>
			<title>pi</title>
			<para>
				Mathematical pi constant, 3.1415926â€¦
			</para>
		</sect2>

		<sect2>
			<title>
				true
			</title>
			<para>
				Logical true value. Can be assigned only to a Boolean variable
			</para>
		</sect2>

		<sect2>
			<title>
				false
			</title>
			<para>
				Logical false value.
			</para>
		</sect2>

		<sect2>
			<title>
				circle
			</title>
			<para>
				A circle shape.
			</para>
		</sect2>

		<sect2>
			<title>
				square
			</title>
			<para>
				A square shape. Affects only visual appearance of the corresponding space agent.
			</para>
		</sect2>

		<sect2>
			<title>
				square2
			</title>
			<para>
				A square shape. Affects both visual appearance and the collision detection algorithm 
				of the corresponding space agent.
			</para>
		</sect2>

		<sect2>
			<title>
				torus
			</title>
			<para>
				A torus shape.

				Note: right now shapes can be used only in the
				following context:
				agent SomeAgent : SomeAgentDerivedFromSpaceAgent
				to create
				super 0.5
				circle
				end
				That is, shapes are available only for agents
				derived from
				SpaceAgent, and shapes should be assigned using super
				command (which
				can be used without errors also only for SpaceAgent)
				with two
				arguments: radius and shape.
			</para>
		</sect2>

		<sect2>
			<title>
				Colors
			</title>
			<para>
				black,
				white,
				grey,
				red,
				green,
				blue,
				cyan,
				magenta,
				yellow,
				brown,
				orange,
				violet,
				pink.
				Note: all colors are
				treated as vectors. So, instead of colors it is
				possible to use vectors in the RGB format where each component is
				between 0 and 1 (smaller and bigger values are ignored).
			</para>
		</sect2>


	</sect1>

	<sect1>
		<title>
			Operations
		</title>
		<para>
			Note: all operations (with few obvious exceptions) require two
			arguments. All operations are infix which means that the arguments are
			written from left and right sides from the operation symbol (e.g. 2 * 3).
		</para>
		<para>
			Note: infix operations have precedence, that is, the order in
			which they are applied. The precedence is usual so no problems should
			occur but in any case it is possible to use parentheses to change the
			precedence.
		</para>
		<para>
			Note: ignore type expressions after colons if you are not
			familiar with them, instead read descriptions.
		</para>

		<sect2>
			<title>
				^
			</title>
			<para>
<programlisting>
^ : double->double->double
</programlisting>
				Power. Works only for numbers.
			</para>
			<para>
				Example:
<programlisting> 
a^b, 2^3.14, pi^pi
</programlisting>
			</para>
		</sect2>

		<sect2>
			<title>
				*, /
			</title>
			<para>
<programlisting>
*,/ : double -> double -> double, double -> vector -> vector, vector -> double -> vector
*,/ : double -> complex, complex -> double, complex -> complex
</programlisting>
				Multiplication, division. Works with real and complex numbers and with a vector on one
				side and a real number on another side.
			</para>
			<para>
				Example:
<programlisting>
var x : double
var v : vector
x = x * 3
v = v / 4
v = v * 2
x = 2 * 2
</programlisting>
			</para>
		</sect2>


		<sect2>
			<title>* (dot)</title>
			<para>
<programlisting>
* : vector -> vector -> number
</programlisting>
				A dot product of two vectors.
			</para>
		</sect2>


		<sect2>
			<title>
				%
			</title>
			<para>
<programlisting>
% : double -> double -> double
</programlisting>
				Returns the residual of a division
			</para>
			<para>
				Example:
<programlisting>
if tick % 10 == 0 [ print "True if the tick is a multiple of ten" ]
</programlisting>
			</para>
		</sect2>

		<sect2>
			<title>
				+, -
			</title>
			<para>
<programlisting>
+, - : double -> double -> double, vector -> vector -> vector
+, - : double -> complex -> complex, complex -> double -> complex, complex -> complex -> complex
</programlisting>
Addition, subtraction: work both for numbers and vectors.
			</para>
		</sect2>
		
		<sect2>
			<title>
				+ (string concatenation)
			</title>
			<para>
<programlisting>
+ : string -> string -> string, string -> double -> string, string -> boolean -> string
+ : string -> vector -> string
</programlisting>
				Concatenates two strings or a string and a primitive value.
			</para>
		</sect2>

		<sect2>
			<title>
				&lt;, > , >=, &lt;=
			</title>
			<para>
<programlisting>
&lt;, > , >=, &lt;=: double -> double -> boolean
</programlisting>
				Comparison operations. Work for numbers only.
			</para>
		</sect2>

		<sect2>
			<title>
				==, !=
			</title>
			<para>
<programlisting>
==, != : double -> double -> boolean, boolean -> boolean -> boolean
==, != : $NullObject -> $NullObject -> $NullObject
</programlisting>
				Equality, inequality. Work for any types. 
				The only condition is that the types are compatible 
				(that is, do not compare a vector and a number, etc.)
				Advanced note: actually, it is possible to compare, for instance, a vector and a grid 
				since both of them are objects of the type $NullObject.
			</para>
		</sect2>

		<sect2>
			<title>
				- (unary)
			</title>
			<para>
<programlisting>
- (unary) : double -> double, complex -> complex, vector -> vector
</programlisting>
				Unary minus. Also works as a negation operation for vectors.
			</para>
		</sect2>

		<sect2>
			<title>
				and, or
			</title>
			<para>
<programlisting>
and, or : boolean ->boolean -> boolean
</programlisting>
				Logical operators AND and OR. Can be applied only to boolean arguments.
			</para>
		</sect2>

		<sect2>
			<title>
				not
			</title>
			<para>
<programlisting>
not : boolean -> boolean
</programlisting>
				Logical negation.
			</para>
			<para>
				Example:
<programlisting>
If not true == false [ print "OK" ]
</programlisting>
			</para>
		</sect2>

		<sect2>
			<title>
				=, +=, *=, -=, /=
			</title>
			<para>
<programlisting>
=, +=, *=, -=, /=
</programlisting>
				Assignment operations from programming languages like C++, Java, C#.
			</para>
			<para>
				+=, -= work with both numbers and vectors.
			</para>
			<para>
				*=, /= work with numbers and with a vector on LHS (the left hand side) 
				and a number on RHS.
			</para>
			<para>
				*= works with a grid on LHS and a number on RHS.
			</para>
		</sect2>

		<sect2>
			<title>
				is
			</title>
			<para>
<programlisting>
variable is type : boolean

variable : $Object
type : $type
</programlisting>
				Checks whether an object on LHS is of type on RHS. Returns a boolean value.
			</para>
			<para>
				Example:
<programlisting>
var v : vector
if v is vector [ print "A vector is a vector"]
if v is grid [print "A vector is a grid"]
</programlisting>
				In this example only the first sentence will be printed out.
			</para>
		</sect2>

		<sect2>
			<title>
				as
			</title>
			<para>
<programlisting>
variable as type : extends $Object

variable : $Object
type : $type
</programlisting>
				Converts a given variable to a given type and returns a conversion result. 
				If the conversion is not possible then the special null value is returned.
			</para>
			<para>
				Example:
<programlisting>
var agent-list = all-agents-here
ask agent-list
[
	var good-agent = self as GoodAgent
	if good-agent == null [ continue ]
	; do something with good-agent
]
</programlisting>
				In this example a list of all agents at the position of the calling 
				(current) agent is obtained. By default, the type of each agent in this list is 
				SpaceAgent. Then all agents in the list are processed (by ask command). 
				New variable 'good-agent' is created with the value of the currently processed 
				agent converted to GoodAgent type. If the conversion was unsuccessful then 
				continue with the next agent in the list.
			</para>
		</sect2>
</sect1>



<!-- Math commands -->
<sect1>
	<title>
		Math commands
	</title>

	<sect2>
		<title>
			abs
		</title>
		<para>
<programlisting>
abs value : number
value : number, complex
</programlisting>
			Returns the absolute value of a given number.
		</para>
	</sect2>

	<sect2>
		<title>
			acos
		</title>
		<para>
<programlisting>
acos value : number
value : number
</programlisting>
			Returns the arccosine of the argument measured in radians.
		</para>
	</sect2>

	<sect2>
		<title>
			asin
		</title>
		<para>
<programlisting>
asin value : number
value : number
</programlisting>
			Returns the arcsine of the argument measured in radians.
		</para>
	</sect2>

	<sect2>
		<title>
			atan
		</title>
		<para>
<programlisting>
atan value : number
value : number
</programlisting>
			Returns the arctangent of the argument measured in radians.
		</para>
	</sect2>

	<sect2>
		<title>
			atan2
		</title>
		<para>
<programlisting>
atan2 x y : number
x : number
y : number
</programlisting>
			Converts rectangular coordinates (x,y) to polar (r, theta) and returns theta.
		</para>
	</sect2>

	<sect2>
		<title>
			ceil
		</title>
		<para>
<programlisting>
ceil value : number
value : number
</programlisting>
			Returns the smallest value that is not less than the argument and is equal to an integer.
		</para>
	</sect2>

	<sect2>
		<title>
			cos
		</title>
		<para>
<programlisting>
cos value : number, complex
value : number, complex
</programlisting>
			Returns the cosine of the argument measured in radians.
		</para>
	</sect2>

	<sect2>
		<title>
			exp
		</title>
		<para>
<programlisting>
exp value : number, complex
value : number, complex
</programlisting>
			Returns the exponent of the argument.
		</para>
	</sect2>

	<sect2>
		<title>
			floor
		</title>
		<para>
<programlisting>
floor number : number
number : number
</programlisting>
			Rounds the number towards zero.
		</para>
	</sect2>

	<sect2>
		<title>
			log
		</title>
		<para>
<programlisting>
log value : number
value : number
</programlisting>
			Returns the natural logarithm of the argument.
		</para>
	</sect2>

	<sect2>
		<title>
			round
		</title>
		<para>
<programlisting>
round number : number
number : number
</programlisting>
			Rounds a number.
		</para>
	</sect2>

	<sect2>
		<title>
			sgn
		</title>
		<para>
<programlisting>
sgn number : number
number : number
</programlisting>
			Returns the sign of the argument.
		</para>
	</sect2>

	<sect2>
		<title>
			sin
		</title>
		<para>
<programlisting>
sin value : number, complex
value : number, complex
</programlisting>
			Returns the sine of the argument measured in radians.
		</para>
	</sect2>


	<sect2>
		<title>
			sqrt
		</title>
		<para>
<programlisting>
sqrt number : number
number : number
</programlisting>
			Returns the square root of a number.
		</para>
	</sect2>

	<sect2>
		<title>
			tan
		</title>
		<para>
<programlisting>
tan number : number, complex
number : number, complex
</programlisting>
			Returns the tangent root of the argument measured in radians.
		</para>
	</sect2>

</sect1>



<!-- Commands -->
<sect1>
	<title>
		Commands
	</title>
	<para>
		Note: command descriptions are in the following format:
		Command name followed by arguments separated by whitespaces. 
		If a command has a return value then after the colon the type of the return value is 
		given. On the next lines arguments listed with their types after colons.
	</para>
	<para>
		Note: special types (types which cannot be declared explicitly) 
		are started with $ symbol.
	</para>
	<para>
		List of special types:
	<variablelist>
		<varlistentry>
			<term>
				$type
			</term>
			<listitem>
				<para>
					A name of any type (except number/double).
				</para>
			</listitem>
		</varlistentry>
		
		<varlistentry>
			<term>
				$integer
			</term>
			<listitem>
				<para>
					Type of integer numbers.
				</para>
			</listitem>
		</varlistentry>
		
		<varlistentry>
			<term>
				$NullObject
			</term>
			<listitem>
				<para>
					Any object type which can assume the null value.
				</para>
			</listitem>
		</varlistentry>
		
		<varlistentry>
			<term>
				$Object : $NullObject
			</term>
			<listitem>
				<para>
					Any object type (not 'double' or 'boolean').
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	</para>


	<sect2>
		<title>
			add-grid-space
		</title>
		<para>
<programlisting>
add-grid-space name x-min x-max y-min y-max wrap-x wrap-y : Space
name : string
x-min : number
y-min : number
x-max : number
y-max : number
wrap-x : boolean
wrap-y : boolean
</programlisting>
			Adds a new Grid space into a model. Call it in the model setup
			method. 'name' is the name of a new space. It can be used for getting
			a reference to this space with 'get-space' command.
		</para>
		<para>
			Note: it is required to have one space declared with 'space' keyword.
			That space is considered to be the default space and is always used when
			no explicit reference to a space is given. Also, that default space has
			the name 'space' so it is prohibited to use the name 'space' for additional spaces.
		</para>
		<para>
			Example: see 'add-standard-space'
		</para>
	</sect2>

	<sect2>
		<title>
			add-physical-space
		</title>
		<para>
<programlisting>
add-physical-space name x-min x-max y-min y-max wrap-x wrap-y : Space
name : string
x-min : number
y-min : number
x-max : number
y-max : number
wrap-x : boolean
wrap-y : boolean
</programlisting>
			Adds a new Physical space into a model. Call it in the model setup
			method. 'name' is the name of a new space. It can be used for getting
			a reference to this space with 'get-space' command.
		</para>
		<para>
			Note: it is required to have one space declared with 'space' keyword.
			That space is considered to be the default space and is always used when
			no explicit reference to a space is given. Also, that default space has
			the name 'space' so it is prohibited to use the name 'space' for additional spaces.
		</para>
		<para>
			Example: see 'add-standard-space'
		</para>
	</sect2>

	<sect2>
		<title>
			add-standard-space
		</title>
		<para>
<programlisting>
add-standard-space name x-min x-max y-min y-max wrap-x wrap-y : Space
name : string
x-min : number
y-min : number
x-max : number
y-max : number
wrap-x : boolean
wrap-y : boolean
</programlisting>
			Adds a new standard space into a model. Call it in the model setup
			method. 'name' is the name of a new space. It can be used for getting
			a reference to this space with 'get-space' command.
		</para>
		<para>
			Note: it is required to have one space declared with 'space' keyword.
			That space is considered to be the default space and is always used when
			no explicit reference to a space is given. Also, that default space has
			the name 'space' so it is prohibited to use the name 'space' for additional spaces.
		</para>
		<para>
			Example:
<programlisting>
; Default space
space GridSpace -20 20 -20 20 true true

global another-space : Space

to setup
	another-space = add-standard-space "One more space" 
                                       (-10) 10 (-10) 10
                                       true false

 	; Agents will be created in default space
	create SomeAgent 2
         
	; Agents will be created in another-space                              
	ask another-space
	[
		create SomeAgent 20
		ask create-one AnotherAgent
 		[
			set-random-position
 		]
	]
end
</programlisting>
			In this example a new space is created inside setup method.
			In this case grids cannot be created inside that new space.
			See 'create-grid-in-space' command to resolve this issue.
		</para>
	</sect2>


	<sect2>
		<title>
			add-standard3d-space
		</title>
		<para>
<programlisting>
add-grid-space name x-min x-max y-min y-max z-min z-max wrap-x wrap-y wrap-z : Space
name : string
x-min : number
y-min : number
z-min : number
x-max : number
y-max : number
z-max : number
wrap-x : boolean
wrap-y : boolean
wrap-z : boolean
</programlisting>
			Adds a new Standard3d space into a model. Call it in the model setup
			method. 'name' is the name of a new space. It can be used for getting
			a reference to this space with 'get-space' command.
		</para>
		<para>
			Note: it is required to have one space declared with 'space' keyword.
			That space is considered to be the default space and is always used when
			no explicit reference to a space is given. Also, that default space has
			the name 'space' so it is prohibited to use the name 'space' for additional spaces.
		</para>
		<para>
			Example: see 'add-standard-space'
		</para>
	</sect2>

	<sect2>
		<title>
			agents
		</title>
		<para>
<programlisting>
agents type : List&lt;type>
type : $type
</programlisting>
			Returns a list of all agents of a specific type.
		</para>
		<para>
			Example:
<programlisting>
var all-good-agents = agents GoodAgent
var number-of-macrophages = count agents Macrophage
</programlisting>
			There is a better way to get the number of specific agents, that is, use agents-number command.
		</para>
		<para>
			Note: only the agents which have precisely the requested type are returned.
<programlisting>
agent Agent1 : Agent

agent Agent2 : Agent1

to get-agents1
	; Only agents of type 'Agent1' will be returned.
	; No agents of type Agent2 will be in the returned agent list.
	var agents1 = agents Agent1
end
</programlisting>
		</para>
	</sect2>


	<sect2>
		<title>
			agents-at
		</title>
		<para>
<programlisting>
agents-at type point radius : List&lt;type>
type : $type
point : vector
radius : number
</programlisting>
			Returns all agents in the default space of a specific type at the 
			specific circular region (given by its center â€˜pointâ€™ and radius â€˜radiusâ€™). 
			The radius cannot be negative. Zero radius means that the agents at a point 
			are requested.
		</para>
		<para>
			Example:
<programlisting>
var good-agents-at-the-origin = agents-at GoodAgent [0,0,0] 0
</programlisting>
		</para>
	</sect2>


	<sect2>
		<title>
			agents-at-as
		</title>
		<para>
<programlisting>
agents-at-as type point radius : List&lt;type>
type : $type
point : vector
radius : number
</programlisting>
			Returns all agents in the default space derived from a specific type at 
			the specific circular region (given by its center â€˜pointâ€™ and radius â€˜radiusâ€™). 
			The radius cannot be negative. Zero radius means that the agents at a 
			point are requested.
		</para>
	</sect2>
	
	<sect2>
		<title>
			agents-as
		</title>
		<para>
<programlisting>
agents-as type : List&lt;type>
type : $type
</programlisting>
			Returns all agents derived from a specific type. 
		</para>
	</sect2>

	<sect2>
		<title>
			agents-here
		</title>
		<para>
<programlisting>
agents-here type : List&lt;type>
type : $type
</programlisting>
			Returns all agents of a specific type 
			intersecting with the current active agent.
		</para>
		<para>
			Note: only agents can call this function.
		</para>
		<para>
			Note: agents in the same space as the calling agent are returned.
		</para>
		<para>
			Note: the calling agent is also returned if its type is the same as 
			the requested one.
		</para>
	</sect2>

	<sect2>
		<title>
			agents-here-as
		</title>
		<para>
<programlisting>
agents-here-as type : List&lt;type>
type : $type
</programlisting>
			Returns all agents derived from a specific type 
			intersecting with the current active agent.
		</para>
		<para>
			Note: only agents can call this function.
		</para>
		<para>
			Note: agents in the same space as the calling agent are returned.
		</para>
		<para>
			Note: the calling agent is also returned if its type is derived form 
			the requested one.
		</para>
	</sect2>


	<sect2>
		<title>
			agents-number
		</title>
		<para>
<programlisting>
agents-number type : number
type : $type
</programlisting>
			Returns the number of agents of a specific type.
		</para>
	</sect2>



	<sect2>
		<title>
			agents-number-as
		</title>
		<para>
<programlisting>
agents-number-as type : number
type : $type
</programlisting>
			Returns the number of agents derived from a specific type.
		</para>
	</sect2>


	<sect2>
		<title>
			all-agents-at
		</title>
		<para>
<programlisting>
all-agents-at point radius : List&lt;SpaceAgent>
point : vector
radius : number
</programlisting>
			Returns all agents in the default space at a given circular region. 
			Type of all returned agents is SpaceAgent. Look at 'as' operation example 
			to see how to convert this type to other types.
		</para>
	</sect2>

	<sect2>
		<title>
			all-agents-here
		</title>
		<para>
<programlisting>
all-agents-here : List&lt;SpaceAgent>
</programlisting>
			Returns all agents at the position of the calling agent.
		</para>
		<para>
			Note: agents in the same space as the calling agent are returned.
		</para>
	</sect2>


	<sect2>
		<title>
			ask
		</title>
		<para>
<programlisting>
ask list [commands]
list : List, Array, $Object
</programlisting>
			Iterates through all objects in the list and performs commands for each object. 
			Commands are given in brackets. 'self' inside the command block refers to 
			the currently processed object from the list. 'myself' inside the command block 
			refers to the object which called 'ask' command.
		</para>
		<para>
			Note: if list == null, then no commands will be executed.
		</para>
		<para>
			Example:
<programlisting>
ask all-agents-here
[
	var good-agent = self as GoodAgent
	ask good-agent
	[
		; the same as self.color = blue
		color = blue
		; actually, the previous command do the same
		; thing as	
		; myself.color = blue
		; because good-agent variable refers to the same object as 
		; self variable from the outer ask command block.
	]
]
</programlisting>
			Note: in the example above 'as' command could return null value, 
			but it is not a problem since 'ask' command correctly works with null list
			and object arguments.
		</para>
	</sect2>



	<sect2>
		<title>
			break
		</title>
		<para>
<programlisting>
break
</programlisting>
			This command is equivalent to 'break' keyword in C, C++, Java, C#. 
			It can be used only inside commands which iterate over some values. 
			This command tells to stop the current iterative process
			('while', 'for', 'repeat', or 'ask') and continue executing commands
			after that process.
		</para>
		<para>
			Example:
<programlisting>
repeat 100
[
	if true [ break ]
]
var y = 0
for x = 1:100
[
	if x == 50 [ break ]
	y += x
]
</programlisting>
		</para>
	</sect2>

	<sect2>
		<title>complex</title>
		<para>
<programlisting>
complex re im : complex
re : double
im : double
</programlisting>
			Creates a complex number with the given real and imaginary parts.
		</para>
	</sect2>

	<sect2>
		<title>
			continue
		</title>
		<para>
<programlisting>
continue
</programlisting>
			This command is equivalent to 'continue' keyword in C, C++, Java, C#. 
			It can be used only inside commands which iterate over some values. 
			This command tells to start the next iteration immediately.
		</para>
		<para>
			Example:
<programlisting>
repeat 100
[
	if true [ continue ]
]
var y = 0
for x = 1:100
[
	if x == 50 [ continue ]
	y += x
]
</programlisting>
		</para>
	</sect2>


	<sect2>
		<title>
			count
		</title>
		<para>
<programlisting>
count list : number
list : List, Array
</programlisting>
			Returns the number of elements in a list (array).
		</para>
	</sect2>


	<sect2>
		<title>
			create
		</title>
		<para>
<programlisting>
create type number : Array&lt;type>
type : $type
number : number
</programlisting>
			Creates 'number' of objects of type 'type'. 
			Cannot be used with types 'number' and 'boolean'. 
			Commonly used for creating new agents.
		</para>
		<para>
			Example:
<programlisting>
create GoodAgent 1000
create BadAgent 1
var vectors = create vector 100 ; creates an array of vectors
ask create SomeAgent 20
[
	set-random-position
]
</programlisting>
		</para>
	</sect2>


	<sect2>
		<title>create-circle</title>
		<para>
<programlisting>
create-circle radius : ShapeInfo
radius : double
</programlisting>
			Creates a circular shape description. Used for changing
			shapes of agents during a simulation process.
		</para>
		<para>
			Note: this command works only for physical agents in a physical space.
		</para>
		<para>
			Example
<programlisting>
; SimpleAgent
agent SimpleAgent : SpaceAgent

to create
        super 0.4 dynamic-circle
        ; equivalent to
        ; radius = 0.7
        shape = create-circle 0.7
end

; Model
model Demo

space PhysicalSpace2d -10 10 -10 10 false false
</programlisting>
		</para>
	</sect2>
	
	
	<sect2>
		<title>create-rect</title>
		<para>
<programlisting>
create-rect hx hy : ShapeInfo
hx : double
hy : double
</programlisting>
			Creates a rectangular shape description. Used for changing
			shapes of agents during a simulation process.
		</para>
		<para>
			Note: this command works only for physical agents in a physical space.
		</para>
		<para>
			Example
<programlisting>
; SimpleAgent
agent SimpleAgent : SpaceAgent

to create
        super 0.4 dynamic-circle
        shape = create-rect 0.2 1
end

; Model
model Demo

space PhysicalSpace2d -10 10 -10 10 false false
</programlisting>
		</para>
	</sect2>


	<sect2>
		<title>
			create-file-reader
		</title>
		<para>
<programlisting>
create-file-reader fname : Reader
fname : string
</programlisting>
			Creates a reader object for the given text file. Returns
			null if the file with the given name does not exist or
			if it cannot be open.
		</para>
		<para>
			Example
<programlisting>
var lines = create-list string 

ask create-file-reader "data.txt"
[
	; Read all lines
	while true
	[
		var line = read-line
		if line == null
			[ break ]

		; Ignore comments
		if line.starts-with "#"
			[ continue ]

		lines.add line				
	]
		
	; Close the reader
	close
]
</programlisting>
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			create-file-writer
		</title>
		<para>
<programlisting>
create-file-writer fname : Writer
fname : string
</programlisting>
			Creates a writer object for the given text file. Returns
			null if the file with the given name cannot be open. This command
			creates a new file if there is no file with the given name.
			Note: files are created in the output folder of a running SPARK model. 
		</para>
		<para>
			Example
<programlisting>
ask create-file-writer "data.txt"
[
	write-num 1
	write-num 2
		
	; Close the writer
	close
]
</programlisting>
		</para>
	</sect2>
	


	<sect2>
		<title>
			create-new-file
		</title>
		<para>
<programlisting>
create-new-file file-name
file-name : string
</programlisting>
			Creates a new file with the given name. 
			If a file with the given name exists, then it will be deleted and a new file
			with the same name will be created.
			Note: files are created in the output folder of a running SPARK model. 
		</para>
		<para>
			Example
<programlisting>
create-new-file "test.log"
</programlisting>
		</para>
	</sect2>
	
	<sect2>
		<title>
			create-unique-file
		</title>
		<para>
<programlisting>
create-unique-file name-prefix
name-prefix : string
</programlisting>
			Creates a new file with the given name. If another file with the given
			name exists, then the name is modified such that a new file has its
			own unique name.
			Note: files are created in the output folder of a running SPARK model. 
		</para>
		<para>
			Example
<programlisting>
create-unique-file "test"
</programlisting>
		</para>
	</sect2>



	<sect2>
		<title>
			create-one
		</title>
		<para>
<programlisting>
create-one type : Type of this command equals to 'type'
type : $type
</programlisting>
			Creates one object of a specific type. 
			The main difference form the 'create' command with number = 1 is that 
			the type of this command is different.
		</para>
		<para>
			Example
<programlisting>
(create-one GoodAgent).color = red
; it is not possible to write the following
; (create GoodAgent 1).color = red
; because the command in parentheses has type Array
</programlisting>
		</para>
	</sect2>


	<sect2>
		<title>
			create-grid
		</title>
		<para>
<programlisting>
create-grid name x-size y-size : grid
name : string
x-size : number
y-size : number
</programlisting>
			Creates a grid with a given name and of a given dimension in the default space. 
			This command can be used in the grid declaration code inside a model class.
		</para>
		<para>
			Note: if no grid initialization is given for a grid, 
			then the default initialization will be created with the name 
			equals to variable's name and with the dimension of the default space.
			So the only use of this command is to create grids of different resolutions.
		</para>
		<para>
			Note: in the current implementation 'name' should be the same as variable's name.
		</para>
		<para>
			Example:
<programlisting>
model Model
global data = create-grid "data" 10 10
</programlisting>
		</para>
	</sect2>
	
	
	
	<sect2>
		<title>
			create-grid3d
		</title>
		<para>
<programlisting>
create-grid3d name x-size y-size z-size : grid3d
name : string
x-size : number
y-size : number
z-size : number
</programlisting>
			Creates a 3-dimensional grid. See create-grid for additional information. 
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			create-grid-in-space
		</title>
		<para>
<programlisting>
create-grid space name x-size y-size : grid
space : Space, string
name : string
x-size : number
y-size : number
</programlisting>
			Creates a grid with a given name and of a given dimension in a given space. 
			This command can be used in the grid declaration code inside a model class.
		</para>
		<para>
			Note: the space should be initialized before this command.
		</para>
		<para>
			Note: in the current implementation 'name' should be the same as variable's name.
		</para>
		<para>
			Example:
<programlisting>
model Model

; Default space
space StandardSpace -20 20 -20 20 true true

; Additional space
global space2 = add-standard-space "space2" (-10) 10 (-10) 10 true false

; Grid will be created in the default space
global data = create-grid "data" 10 10

; Grid will be created in space2
global data2 = create-grid-in-space space2 "data2" 
                                    space2.x-size space2.y-size

; Grid will be created in the default space with the default size
global data3 : grid                                  
</programlisting>
		</para>
	</sect2>


	<sect2>
		<title>
			create-list
		</title>
		<para>
<programlisting>
create-list type : List&lt;$type&gt;
type : $type
</programlisting>
			Creates a list which can contain object of the given type. 
		</para>
		<para>
			Example:
<programlisting>
; Create a list of strings
var list = create-list string

list.add "first"
list.add "second" 
</programlisting>
		</para>
	</sect2>


	<sect2>
		<title>
			create-vector
		</title>
		<para>
<programlisting>
create-vector x y z : vector
x : number
y : number
z : number
</programlisting>
			Creates a new vector with the given components
		</para>
	</sect2>


	<sect2>
		<title>
			current-time-millis
		</title>
		<para>
<programlisting>
current-time-millis : double
</programlisting>
			Returns the current system time in milliseconds.
		</para>
	</sect2>


	<sect2>
		<title>
			delaunay-triangulation
		</title>
		<para>
<programlisting>
delaunay-triangulation list-of-agents link-type
list-of-agents : List&lt;SpaceAgent&gt;
link-type : $type (should be derived from SpaceLink)
</programlisting>
			Computes Delaunay triangulation of points representing
			centers of agents in the list. Agents in the list
			will be connected by links of the given type when
			the triangulation is computed.
		</para>
		<para>
			Example:
<programlisting>
; Kill all existing MyLink's
kill agents MyLink
; Compute Delaunay triangulation and connect agents with MyLink's
delaunay-triangulation (agents TestAgent) MyLink
</programlisting>			
		</para>
	</sect2>



	<sect2>
		<title>
			distance
		</title>
		<para>
<programlisting>
distance agent1 agent2 : vector
agent1 : SpaceAgent
agent2 : SpaceAgent
</programlisting>
<programlisting>
distance pos1 pos2 : vector
pos1 : vector
pos2 : vector
</programlisting>
			Returns the vector v equals to agent2.position â€“ agent1.position (pos2 - pos1). 
			It does more: in the torus topology the shortest vector-distance is returned.
		</para>
		<para>
			Example:
<programlisting>
; get the vector-distance between agents and then compute the length of this vector
var distance-between-agents = (distance agent1 agent2).length
</programlisting>
		</para>
	</sect2>


	<sect2>
		<title>
			diffuse
		</title>
		<para>
<programlisting>
diffuse grid value
grid : grid (DataLayer), grid3d
value : number
</programlisting>
			Performs the diffusion operation on a given grid. 
			'value' is the diffusion coefficient.
		</para>
		<para>
			The diffusion operation is performed as follows. Each data layer cell shares
		 	(coefficient * 100) percents of its value with its eight neighbors.
			The coefficient should be between 0 and 1 for a well-defined behavior. 
		</para>
	</sect2>


	<sect2>
		<title>
			evaporate
		</title>
		<para>
<programlisting>
evaporate grid value
grid : grid (DataLayer), grid3d
value : number
</programlisting>
			Performs the evaporation operation on a given grid. 
			'value' is the evaporation coefficient.
		</para>
		<para>
			Evaporation simply means multiplication of all data layer values by 
			the given value.
		</para>
	</sect2>


	<sect2>
		<title>
			exit
		</title>
		<para>
<programlisting>
exit
</programlisting> 
			This command ends the current method. 
			Only methods that do not return any value can use this command. 
			Other methods should use 'return'.
		</para>
	</sect2>


	<sect2>
		<title>
			for
		</title>
		<para>
<programlisting>
for var-name = from : step : to [] (a special syntax, not a type definition)
for from : to [] (another form with step = 1 by default)
from : double
step : double
to : double
</programlisting>
			A loop command for iterating values of the given variable from 'from' to 'to'
			with the step size 'step'.
		</para>
		<para>
			Note: var-name should be a unique name, no other local variables
			with the same name should exist in the method using a 'for' loop. 
		</para>
	</sect2>


	<sect2>
		<title>
			fprint
		</title>
		<para>
<programlisting>
fprint file-name object
file-name : string
object : $Object, string, number
</programlisting>
			Prints a text representation of the given object into the given file.
			If a file with the given name doesn't exist, then a new file will be created.
			If a file with the given name exists, then a new text line 
			will be appended to the end of this file.
		</para>
		<para>
			Example
<programlisting>
fprint "test.log" "2 + 2 = "
fprint "test.log" (2 + 2)
; The following two lines will be added to the file "test.log":
; 2 + 2 =
; 4
</programlisting>
		</para>
		<para>
			See create-writer and Writer object for another way of creating files in SPARK.
		</para>
	</sect2>



	<sect2>
		<title>
			get
		</title>
		<para>
<programlisting>
get list index
list : List, Array
index : number
</programlisting>
			Returns an element from the list at the position specified by the index.
		</para>
	</sect2>


	<sect2>
		<title>
			get-grid
		</title>
		<para>
<programlisting>
get-grid name : $DataLayer
name : string
</programlisting>
			Returns a grid with the given name.
		</para>
	</sect2>


	<sect2>
		<title>
			get-space
		</title>
		<para>
<programlisting>
get-space name : Space
name : string
</programlisting>
			Returns a space with the given name. Default space has name 'space'.
		</para>
	</sect2>


<!-- I -->

	<sect2>
		<title>
			if
		</title>
		<para>
<programlisting>
if condition [commands]
condition : boolean
</programlisting>
			A standard if control statement. If the condition is true, 
			then the commands will be executed.
		</para>
	</sect2>


	<sect2>
		<title>
			ifelse
		</title>
		<para>
<programlisting>
ifelse condition [commands1][command2]
condition : boolean
</programlisting>
			A standard if-else control statement. If the condition is true, 
			then commands from the first block will be executed, 
			otherwise commands from the second block will be performed.
		</para>
	</sect2>


	<sect2>
		<title>
			interpolate
		</title>
		<para>
<programlisting>
interpolate v1 v2 t  : vector (number)
v1 : vector (number)
v2 : vector (number)
t : number
</programlisting>
			This command is a slightly optimized version of v1 * (1 - t) + t * v2
		</para>
	</sect2>


	<sect2>
		<title>
			is-key-pressed
		</title>
		<para>
<programlisting>
is-key-pressed key-name : boolean
key-name : string
</programlisting>
			Returns true if the key with the given name is pressed.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			is-mouse-button-pressed
		</title>
		<para>
<programlisting>
is-mouse-button-pressed button : boolean
button : double
</programlisting>
			Returns true if the given mouse button is pressed (1 = left button,
			2 = right button).
		</para>
	</sect2>	


<!-- K -->
	<sect2>
		<title>
			kill
		</title>
		<para>
<programlisting>
kill agent-list
agent-list : List, Array, $Object
</programlisting>
			Kills all agents in the list, that is, this command 
			calls 'die' for each agent in the list. This command is a shortcut for
<programlisting>
ask agent-list
[
	die
]
</programlisting>
		</para>
	</sect2>


<!-- M -->

	<sect2>
		<title>
			max
		</title>
		<para>
<programlisting>
max a b : number
a : number
b : number
</programlisting>
			Returns the maximum of two numbers.
		</para>
	</sect2>


	<sect2>
		<title>
			min
		</title>
		<para>
<programlisting>
min a b : number
a : number
b : number
</programlisting>
			Returns the minimum of two numbers.
		</para>
	</sect2>


	<sect2>
		<title>
			mouse-position
		</title>
		<para>
<programlisting>
mouse-position : vector
</programlisting>
			Returns the current mouse position.
		</para>
	</sect2>


	<sect2>
		<title>
			myself
		</title>
		<para>
<programlisting>
myself : $Object
</programlisting>
			Returns a reference to the calling agent. See 'ask' for more information.
		</para>
	</sect2>


<!-- N -->
	<sect2>
		<title>
			next-key-event
		</title>
		<para>
<programlisting>
next-key-event : KeyEvent
</programlisting>
			Returns the next keyboard event from the keyboard event queue.
			Returns null if the queue is empty.
		</para>
		<para>
			Example
<programlisting>
var left-pressed : bool

; Process all keyboard events
while true
[
	var event = next-key-event
	if event == null
		[ break ]
		
	; Left arrow event
	if event.name == "left"
	[
		left-pressed = event.pressed
	]
]
</programlisting>
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			next-mouse-event
		</title>
		<para>
<programlisting>
next-mouse-event : MouseEvent
</programlisting>
			Returns the next mouse event from the mouse event queue.
			Returns null if the queue is empty
		</para>
	</sect2>


	<sect2>
		<title>
			normal-random
		</title>
		<para>
<programlisting>
normal-random mean std : double
mean : double
std : double
</programlisting>
			Returns a normally distributed random number.
		</para>
	</sect2>


	<sect2>
		<title>
			num2int
		</title>
		<para>
<programlisting>
num2int n : $integer
n : double
</programlisting>
			Converts the given floating point number to an integer number.
		</para>
	</sect2>


<!-- O -->
	<sect2>
		<title>
			one-of
		</title>
		<para>
<programlisting>
one-of list : Type of elements of list
list : List, Array
</programlisting>
			Returns one randomly selected element of the given list.
		</para>
		<para>
			Note: the list argument should be not null.
		</para>
	</sect2>


<!-- P -->

	<sect2>
		<title>
			parent
		</title>
		<para>
<programlisting>
parent : $Object
</programlisting>
			Returns a reference to the parent class of the current class.
		</para>
	</sect2>


	<sect2>
		<title>
			print
		</title>
		<para>
<programlisting>
print str
str : string, double, boolean, $Object
</programlisting>
			Prints out a string
		</para>
	</sect2>


<!-- R -->
	<sect2>
		<title>
			random-in-interval
		</title>
		<para>
<programlisting>
random-in-interval a b : number
a : number
b : number
</programlisting>
			Returns a uniformly distributed random number in the interval [a,b).
		</para>
	</sect2>


	<sect2>
		<title>
			random
		</title>
		<para>
<programlisting>
random a : number
a : number
</programlisting>
			Returns a uniformly distributed random number in the interval [0, a)
		</para>
	</sect2>


	<sect2>
		<title>
			random-vector
		</title>
		<para>
<programlisting>
random-vector a b : vector
a : number
b : number
</programlisting>
			Returns a random vector with uniformly distributed components in 
			the interval [a, b).
		</para>
		<para>
			Note: this function returns a random 2-d vector with the third component 0.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			random-vector3
		</title>
		<para>
<programlisting>
random-vector a b : vector
a : number
b : number
</programlisting>
			Returns a random vector with uniformly distributed components in 
			the interval [a, b).
		</para>
		<para>
			Note: this function returns a random 3-d vector.
		</para>
	</sect2>


	<sect2>
		<title>
			random-vector-of-length
		</title>
		<para>
<programlisting>
random-vector-of-length length : vector
length : number
</programlisting>
			Returns a random vector of the given length.
		</para>
		<para>
			Note: this function returns a random 2-d vector with the third component 0.
		</para>
	</sect2>


	<sect2>
		<title>
			random-vector3-of-length
		</title>
		<para>
<programlisting>
random-vector-of-length length : vector
length : number
</programlisting>
			Returns a random vector of the given length.
		</para>
		<para>
			Note: this function returns a random 3-d vector.
		</para>
	</sect2>


	<sect2>
		<title>
			repeat
		</title>
<para>
<programlisting>
repeat number [commands]
number : number
</programlisting>
			Repeats commands the given number of times.
		</para>
	</sect2>


	<sect2>
		<title>
			return
		</title>
		<para>
<programlisting>
return value
</programlisting>
			Returns the given 'value' as methodâ€™s value.
		</para>
		<para>
			Note: the type of 'value' should be compatible with methodâ€™s return type.
		</para>
	</sect2>


<!-- S -->

	<sect2>
		<title>
			self
		</title>
		<para>
<programlisting>
self : $Object
</programlisting>
			Returns a reference to the active object (agent).
		</para>
	</sect2>


	<sect2>
		<title>
			set
		</title>
		<para>
<programlisting>
set list index value
list : List, Array
index : number
value : Type of elements of the list
</programlisting>
			Sets a new value for the element at the specific position of the list.
		</para>
	</sect2>


	<sect2>
		<title>
			space-xmin
		</title>
		<para>
<programlisting>
space-xmin : number
</programlisting>
			Returns the minimum x coordinate of the default space.
		</para>
	</sect2>


	<sect2>
		<title>
			space-xmax
		</title>
		<para>
<programlisting>
space-xmax : number
</programlisting>
			Returns the maximum x coordinate of the default space.
		</para>
	</sect2>


	<sect2>
		<title>
			space-ymin
		</title>
		<para>
<programlisting>
space-ymin : number
</programlisting>
			Returns the minimum y coordinate of the default space.
		</para>
	</sect2>


	<sect2>
		<title>
			space-ymax
		</title>
		<para>
<programlisting>
space-ymax : number
</programlisting>
			Returns the maximum y coordinate of the default space.
		</para>
	</sect2>


	<sect2>
		<title>
			space-xsize
		</title>
		<para>
<programlisting>
space-xsize : number
</programlisting>
			Returns the size of the default space along x-axis. 
			That is, space-xmax â€“ space-xmin.
		</para>
	</sect2>


	<sect2>
		<title>
			space-ysize
		</title>
		<para>
<programlisting>
space-ysize : number
</programlisting>
			Returns the size of the default space along y-axis. 
			That is, space-ymax â€“ space-ymin.
		</para>
	</sect2>


	<sect2>
		<title>
			sum
		</title>
		<para>
<programlisting>
sum list : number
list : grid, grid3d
</programlisting>
			Returns a total sum of all data values stored in a grid.
		</para>
	</sect2>


<!-- T -->
	<sect2>
		<title>
			this
		</title>
		<para>
<programlisting>
this : $Object
</programlisting>
			Returns a reference to the current object.
		</para>
	</sect2>


	<sect2>
		<title>
			to-string
		</title>
		<para>
<programlisting>
to-string arg : string
n : number, boolean, $integer, vector, $Object
</programlisting>
			Converts the argument into a string.
		</para>
		<para>
			Note: the argument should be not null.
		</para>
	</sect2>



	<sect2>
		<title>
			truncate
		</title>
		<para>
<programlisting>
truncate v min max : vector
v : vector
min : number
max : number
</programlisting>
			Truncates all components of a given vector.
		</para>
	</sect2>


<!-- U -->
	<sect2>
		<title>
			use-primary-random-generator
		</title>
		<para>
			Tells the simulation engine to use the primary random generator for producing
			random numbers.
		</para>
		<para>
			Note: the primary random generator is used by default.
		</para>
	</sect2>

	<sect2>
		<title>
			use-secondary-random-generator
		</title>
		<para>
			Tells the simulation engine to use the secondary random generator for producing
			random numbers.
		</para>
		<para>
			Switching to the secondary generator is useful in cases when it is required
			to generate some random numbers which should not affect a simulation output.
		</para>
	</sect2>


<!-- V -->
	<sect2>
		<title>
			vector-in-direction
		</title>
		<para>
<programlisting>
vector-in-direction length angle : vector
length : number
angle : number
</programlisting>
			Returns a vector of length 'length' in the direction specified by 'angle'.
		</para>
		<para>
			Note: the angle should be measured in degrees.
		</para>
		<para>
			Note: a 2-d vector is returned.
		</para>
	</sect2>


<!-- W -->
	<sect2>
		<title>
			while
		</title>
		<para>
<programlisting>
while condition [commands]
</programlisting>
			Commands in the block are executed while the condition is true.
		</para>
	</sect2> 

</sect1>


<!-- string -->

<sect1>
	<title>string</title>

	<para>
		Methods and fields of the 'string' class. 
	</para>

	<sect2>
		<title>
			split
		</title>
	
		<para>
<programlisting>
split regexp : List&lt;string&gt;
regexp : string
</programlisting>
			Splits the string object into a list of strings based on the
			given regular expression (Java regular expression syntax).
		</para>
		<para>
			Example
<programlisting>
var str = "first,second"
var list = str.split ","
; Prints "first"
print (get list 0)
; Prints "second"
print (get list 1)
</programlisting>
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			trim
		</title>
	
		<para>
<programlisting>
trim : string
</programlisting>
			Removes leading and ending spaces in the string object.
		</para>
		<para>
			Example
<programlisting>
var str = " first, second "
var list = str.split ","
; Prints "first"
print (get list 0)
; Prints "second"
print (get list 1)
</programlisting>
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			to-num
		</title>
	
		<para>
<programlisting>
to-num : number
</programlisting>
			Converts the string object into a number.
		</para>
		<para>
			Example
<programlisting>
var str = "12.4"
var x = str.to-num + 1
; Prints 13.4
print x
</programlisting>
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			to-int
		</title>
	
		<para>
<programlisting>
to-int : $integer
</programlisting>
			Converts the string object into an integer number.
		</para>
	</sect2>


	<sect2>
		<title>
			starts-with
		</title>
	
		<para>
<programlisting>
starts-with str : boolean
str : string
</programlisting>
			Returns true if the string object starts with the given substring.
		</para>
		<para>
			Example
<programlisting>
var str = "first,second"
; Prints 'true'
print str.starts-with "first"
</programlisting>
		</para>
	</sect2>


	<sect2>
		<title>
			substring
		</title>
	
		<para>
<programlisting>
substring begin end : string
begin : number
end : number
</programlisting>
			Returns a substring of the string object with the first symbol
			specified by the 'begin' index, and the last symbol specified by
			the 'end' index (indices start from 0).
		</para>
		<para>
			Note: the 'end' index is exclusive, that is, the substring
			symobls have 'begin', 'begin' + 1,..., 'end' - 1 indices in the original
			string.
		</para>
		<para>
			Example
<programlisting>
var str = "first,second"
; Prints "st,s"
print str.substring 3 7
</programlisting>
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			substring-end
		</title>
	
		<para>
<programlisting>
substring-end begin : string
begin : number
</programlisting>
			Returns a substring of the string object which starts at the 'begin' index.
		</para>
		<para>
			Example
<programlisting>
var str = "first,second"
; Prints "econd"
print str.substring-end 7
</programlisting>
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			char-at
		</title>
	
		<para>
<programlisting>
char-at i : number
i : number
</programlisting>
			Returns the code of a symbol at the given position in the string object.
		</para>
	</sect2>
</sect1>


<sect1>
	<title>List</title>
	<para>
		Methods and fields of list objects.
	</para>
	
	<sect2>
		<title>
			add
		</title>
	
		<para>
<programlisting>
add object
object : $Object (the type should be compatible with the list subtype)
</programlisting>
			Adds an object to the list object.
		</para>
		<para>
			Example
<programlisting>
var list = create-list string
list.add "first"
</programlisting>
		</para>
	</sect2>
	
	<sect2>
		<title>
			add-all
		</title>
	
		<para>
<programlisting>
add-all list
list : List&lt;type&gt; (the type should be compatible with the list subtype)
</programlisting>
			Adds all objects from the argument to the list object.
		</para>
		<para>
			Example
<programlisting>
var list = create-list string
var list2 = create-list string
list.add "first"
list2.add "second"
list2.add "third"

list.add-all list2
</programlisting>
		</para>
	</sect2>

	<sect2>
		<title>
			add-all-at
		</title>
	
		<para>
<programlisting>
add-all-at index list
index : number
list : List&lt;type&gt; (the type should be compatible with the list subtype)
</programlisting>
			Adds all objects from the argument to the list object starting at the specified
			position.
		</para>
	</sect2>


	<sect2>
		<title>
			add-at
		</title>
	
		<para>
<programlisting>
add-at index object
index : number
object : $Object (the type should be compatible with the list subtype)
</programlisting>
			Inserts an object to the list at the specific location. 
		</para>
		<para>
			Example
<programlisting>
var list = create-list string
list.add "second"
list.add-at 0 "first"
</programlisting>
		</para>
	</sect2>

	<sect2>
		<title>
			clear
		</title>
	
		<para>
<programlisting>
clear
</programlisting>
			Removes all elements from the list object.
		</para>
	</sect2>


	<sect2>
		<title>
			set
		</title>
	
		<para>
<programlisting>
set i val
i : number
val : $Object (the type should be compatible with the list subtype)
</programlisting>
			Sets a new value at the given index.
		</para>
		<para>
			Note: the index should be less than the length of the list.
		</para>
		<para>
			Example
<programlisting>
var list = create-list string

ask list
[
	add "first"
	set 0 "new first"
]
</programlisting>
		</para>
	</sect2>


	<sect2>
		<title>
			remove-at
		</title>
	
		<para>
<programlisting>
remove-at i
i : number
</programlisting>
			Removes an element at the given index.
		</para>
		<para>
			Example
<programlisting>
var list = create-list string
list.add "first"
list.add "second"
list.remove-at 0
; Now the list has only 1 element: "second"
</programlisting>
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			remove
		</title>
	
		<para>
<programlisting>
remove object
object : $Object (the type should be compatible with the list subtype)
</programlisting>
			Removes the given object from the list. If the object is not inside
			the list, then the list is not changed.
		</para>
		<para>
			Example
<programlisting>
var list = create-list string
list.add "first"
list.add "second"

list.remove "second"
list.remove "third";

; Now the list has 1 element: "first"
</programlisting>
		</para>
	</sect2>


	<sect2>
		<title>
			remove-all
		</title>
	
		<para>
<programlisting>
remove-all list-arg
list-arg : List&lt;type&gt; (the type should be compatible with the list subtype)
</programlisting>
			Removes all elements of the argument from the list object.
		</para>
		<para>
			This command is equivalent to the following code
<programlisting>
ask list-arg
[
	list.remove self
]
</programlisting>
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			contains
		</title>
	
		<para>
<programlisting>
contains object : boolean
object : $Object (the type should be compatible with the list subtype)
</programlisting>
			Returns true if the list contains the given object.
		</para>
	</sect2>
	
	
</sect1>


<!-- vector -->

<sect1>
	<title>vector</title>

	<para>
		Methods and fields of the 'vector' class. 
	</para>

	<sect2>
		<title>
			x
		</title>
	
		<para>
<programlisting>
x : number
</programlisting>
			The first component of a vector.
		</para>
	</sect2>


	<sect2>
		<title>
			y
		</title>
	
		<para>
<programlisting>
y : number
</programlisting>
			The second component of a vector.
		</para>
	</sect2>


	<sect2>
		<title>
			z
		</title>
	
		<para>
<programlisting>
z : number
</programlisting>
			The third component of a vector.
		</para>
	</sect2>


	<sect2>
		<title>
			length
		</title>
	
		<para>
<programlisting>
length : number
</programlisting>
			Returns the length of a vector.
		</para>
	</sect2>


	<sect2>
		<title>
			length-squared
		</title>
	
		<para>
<programlisting>
length-squared : number
</programlisting>
			Returns the squared length of a vector.
		</para>
	</sect2>


	<sect2>
		<title>
			normalize
		</title>
	
		<para>
<programlisting>
normalize : vector
</programlisting>
			Normalizes a vector and returns a reference to itself.
		</para>
	</sect2>


	<sect2>
		<title>
			truncate-length
		</title>
	
		<para>
<programlisting>
truncate-length max-length : vector
max-length : number
</programlisting>
			If the length of a vector is higher than 'max-length' then
			its length is truncated to 'max-length'. Otherwise, the vector is unchanged.
			A reference to itself is returned.
		</para>
	</sect2>



	<sect2>
		<title>
			copy
		</title>
	
		<para>
<programlisting>
copy : vector
</programlisting>
			Returns a copy of a vector.
		</para>
	</sect2>


	<sect2>
		<title>
			dot
		</title>
	
		<para>
<programlisting>
dot v : number
v : vector
		</programlisting>
			Computes the dot product with a given vector.
		</para>
	</sect2>


	<sect2>
		<title>
			cross
		</title>
	
		<para>
<programlisting>
cross v : vector
v : vector
</programlisting>
			Computes the cross product with a given vector.
			The result overrides the current vector's value. 
		</para>
	</sect2>



	<sect2>
		<title>
			parallel-component
		</title>
	
		<para>
<programlisting>
parallel-component unit-vector : vector
unit-vector : vector
</programlisting>
			Returns a component of a vector parallel to a given
			unit vector.
		</para>
		<para>
			Note: the argument vector should be of a unit length
			for this method to yield a correct result.
		</para>
		<para>
			This method computes: (u,v) * u, where u is the argument, and 
			v is the vector object.
		</para>
	</sect2>


	<sect2>
		<title>
			perpendicular-component
		</title>
	
		<para>
<programlisting>
perpendicular-component unit-vector : vector
unit-vector : vector
		</programlisting>
			Returns a component of a vector perpendicular to a given
			unit vector.
		</para>
		<para>
			Note: the argument vector should be of a unit length
			for this method to yield a correct result.
		</para>
		<para>
			This method computes: v - (u,v) * u
		</para>
	</sect2>
</sect1>


<!-- complex -->
<sect1>
	<title>complex</title>
	<para>
		Methods and fields of a class for complex numbers.
	</para>
	
	<sect2>
		<title>
			re
		</title>
	
		<para>
<programlisting>
re : number
</programlisting>
			Returns the real part of a complex number.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			im
		</title>
	
		<para>
<programlisting>
im : number
</programlisting>
			Returns the imaginary part of a complex number.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			abs
		</title>
	
		<para>
<programlisting>
abs : number
</programlisting>
			Returns the absolute value of a complex number.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			arg
		</title>
	
		<para>
<programlisting>
arg : number
</programlisting>
			Returns the polar argument of a complex number.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			reciprocal
		</title>
	
		<para>
<programlisting>
reciprocal : complex
</programlisting>
			Computes the inverse of a complex number.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			conjugate
		</title>
	
		<para>
<programlisting>
conjugate : complex
</programlisting>
			Returns the conjugate of a complex number.
		</para>
	</sect2>
</sect1>


<!-- Reader -->

<sect1>
	<title>Reader</title>
	<para>
		A class for reading text files.
	</para>
	
	
		
	<sect2>
		<title>
			close
		</title>
	
		<para>
<programlisting>
close
</programlisting>
			Closes an open file.
		</para>
	</sect2>
	
	
		
	<sect2>
		<title>
			read-line
		</title>
	
		<para>
<programlisting>
read-line : string
</programlisting>
			Returns the next line from an open file. Returns null if no new lines
			are available.
		</para>
		<para>
			Example
<programlisting>
ask create-reader "test.txt"
[
	; Read all lines
	while true
	[
		var line = read-line
		if line == null
			[ break ]
			
		; Process the line
	]

	; Close the file
	close	
]
</programlisting>
		</para>
	</sect2>
	
	
		
	<sect2>
		<title>
			read-num
		</title>
	
		<para>
<programlisting>
read-num : number
</programlisting>
			Reads a number from a file.
		</para>
	</sect2>


	<sect2>
		<title>
			read-bool
		</title>
	
		<para>
<programlisting>
read-bool : boolean
</programlisting>
			Reads a boolean value from a file.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			read-int
		</title>
	
		<para>
<programlisting>
read-int : $integer
</programlisting>
			Reads an integer from a file.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			read-vector
		</title>
	
		<para>
<programlisting>
read-vector : vector
</programlisting>
			Reads a vector from a file.
		</para>
	</sect2>
</sect1>


<!-- Writer -->
<sect1>
	<title>Writer</title>
	<para>
		A class for writing text files.
	</para>
	
	<sect2>
		<title>
			close
		</title>
	
		<para>
<programlisting>
close
</programlisting>
			Closes an open file.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			write-line
		</title>
	
		<para>
<programlisting>
write-line line
line : string
</programlisting>
			Writes a string into a file.
		</para>
	</sect2>


	<sect2>
		<title>
			write-num
		</title>
	
		<para>
<programlisting>
write-num n
n : number
</programlisting>
			Writes a number into a file.
		</para>
	</sect2>


	<sect2>
		<title>
			write-bool
		</title>
	
		<para>
<programlisting>
write-bool b
b : boolean
</programlisting>
			Writes a boolean value into a file.
		</para>
	</sect2>


	<sect2>
		<title>
			write-vector
		</title>
	
		<para>
<programlisting>
write-vector v
v : vector
</programlisting>
			Writes a vector into a file.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			write-object
		</title>
	
		<para>
<programlisting>
write-object obj
obj : $Object
</programlisting>
			Converts the given object into a string and writes this string into a file.
			If the object is null, then "null" is written into a file.
		</para>
	</sect2>

</sect1>


<!-- KeyEvent -->
<sect1>
	<title>KeyEvent</title>
	<para>
		A class for keyboard events.
	</para>
	
	<sect2>
		<title>
			pressed
		</title>
	
		<para>
<programlisting>
pressed : boolean
</programlisting>
			Returns the status of the key for this event.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			name
		</title>
	
		<para>
<programlisting>
name : string
</programlisting>
			Returns the name of the key for this event.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			space-name
		</title>
	
		<para>
<programlisting>
space-name : string
</programlisting>
			Returns the space name for which the event was created.
		</para>
	</sect2>
</sect1>


<!-- MouseEvent -->
<sect1>
	<title>MouseEvent</title>
	<para>
		A class for mouse events.
	</para>
	
	
	<sect2>
		<title>
			event-type
		</title>
	
		<para>
<programlisting>
event-type : string
</programlisting>
			Returns the type of the event. Possible types are: "LBUTTON_DOWN", "LBUTTON_UP",
			"RBUTTON_DOWN", "RBUTTON_UP", "MBUTTON_DOWN", "MBUTTON_UP", "MOUSE_MOVE",
			"MOUSE_WHEEL".
		</para>
	</sect2>


	<sect2>
		<title>
			position
		</title>
	
		<para>
<programlisting>
position : vector
</programlisting>
			Returns the mouse position for the event.
		</para>
	</sect2>


	<sect2>
		<title>
			buttons
		</title>
	
		<para>
<programlisting>
buttons : $integer
</programlisting>
			Returns the mouse button states for the event.
		</para>
	</sect2>


	<sect2>
		<title>
			wheel
		</title>
	
		<para>
<programlisting>
wheel : $integer
</programlisting>
			Returns the mouse wheel state for the event.
		</para>
	</sect2>


	<sect2>
		<title>
			space-name
		</title>
	
		<para>
<programlisting>
space-name : string
</programlisting>
			Returns the space name for which the event was created.
		</para>
	</sect2>
</sect1>


<!-- Space -->
<sect1>
	<title>
		Space
	</title>


	<sect2>
		<title>
			create
		</title>
		<para>
<programlisting>
create type number : $Array&lt;type>
type : $type (derived from SpaceAgent)
number : number
</programlisting>
			Creates 'number' of agents of the type 'type' in a specific space.
		</para>
		<para>
			Example:
<programlisting>
; Create 1000 GoodAgent in the space "Space2".
ask get-space "Space2"
[
	create GoodAgent 1000
]
</programlisting>
		</para>
	</sect2>


	<sect2>
		<title>
			create-one
		</title>
		<para>
<programlisting>
create-one type : Type of this command equals to â€˜typeâ€™
type : $type (derived from SpaceAgent)
</programlisting>
			Creates one agent of a specific type in a given space. 
			The main difference form the previous command with number = 1 
			is that the type of this command is different.
		</para>
		<para>
			Example
<programlisting>
var space1 = add-standard-space (-10) 10 (-20) 20 true false
(space1.create-one GoodAgent).color = red
; it is not possible to write the following
; (space1.create GoodAgent 1).color = red
; because the command in parentheses has type $Array
</programlisting>
		</para>
	</sect2>


	<sect2>
		<title>
			x-min
		</title>
		<para>
<programlisting>
x-min : number
		</programlisting>
			Returns the minimum x coordinate of a space.
		</para>
	</sect2>


	<sect2>
		<title>
			x-max
		</title>
		<para>
<programlisting>
x-max : number
</programlisting>
			Returns the maximum x coordinate of a space.
		</para>
	</sect2>


	<sect2>
		<title>
			y-min
		</title>
		<para>
<programlisting>
y-min : number
</programlisting>
			Returns the minimum y coordinate of a space.
		</para>
	</sect2>


	<sect2>
		<title>
			y-max
		</title>
		<para>
<programlisting>
y-max : number
</programlisting>
			Returns the maximum y coordinate of a space.
		</para>
	</sect2>


	<sect2>
		<title>
			x-size
		</title>
		<para>
<programlisting>
x-size : number
</programlisting>
			Returns the size of a space along the x-axis. That is, x-max â€“ x-min.
		</para>
	</sect2>

	
	<sect2>
		<title>
			y-size
		</title>
		<para>
<programlisting>
y-size : number
</programlisting>
			Returns the size of a space along the y-axis. That is, y-max â€“ y-min.
		</para>
	</sect2>


	<sect2>
		<title>
			agents-at
		</title>
		<para>
<programlisting>
agents-at type point radius : List&lt;type>
type : $type
point : vector
radius : number
</programlisting>
			Returns all agents in a given space of a specific type 
			at the specific circular region 
			(given by its center â€˜pointâ€™ and radius â€˜radiusâ€™). 
			Radius cannot be negative. 
			Zero radius means that the agents at a point are requested.
		</para>
	</sect2>


	<sect2>
		<title>
			agents-at-as
		</title>
		<para>
<programlisting>
agents-at-as type point radius : List&lt;type>
type : $type
point : vector
radius : number
</programlisting>
			Returns all agents in a given space derived from a specific type 
			at the specific circular region 
			(given by its center â€˜pointâ€™ and radius â€˜radiusâ€™). 
			Radius cannot be negative. 
			Zero radius means that the agents at a point are requested.
		</para>
	</sect2>


	<sect2>
		<title>
			all-agents-at
		</title>
		<para>
<programlisting>
all-agents-at point radius : List&lt;SpaceAgent>
point : vector
radius : number
</programlisting>
			Returns all agents in a given space
			at a given circular region. 
			Type of all returned agents is SpaceAgent. 
		</para>
	</sect2>



	<sect2>
		<title>
			agents-here
		</title>
		<para>
<programlisting>
agents-here type : List&lt;type>
type : $type
</programlisting>
			Returns all agents of a specific type intersecting with the current active agent.
		</para>
		<para>
			Note: only agents can call this function.
		</para>
		<para>
			Note: agents in a given space are returned.
		</para>
		<para>
			Note: the calling agent may also be returned if its type is the same as requested one.
		</para>
	</sect2>


	<sect2>
		<title>
			agents-here-as
		</title>
		<para>
<programlisting>
agents-here-as type : List&lt;type>
type : $type
</programlisting>
			Returns all agents derived from a specific type intersecting with the current active agent.
		</para>
		<para>
			Note: only agents can call this function.
		</para>
		<para>
			Note: agents in a given space are returned.
		</para>
		<para>
			Note: the calling agent may also be returned if its type is derived from requested one.
		</para>
	</sect2>


	<sect2>
		<title>
			all-agents-here
		</title>
		<para>
<programlisting>
all-agents-here : List&lt;SpaceAgent>
</programlisting>
			Returns all agents at the position of a calling agent.
		</para>
		<para>
			Note: agents in a given space are returned.
		</para>
	</sect2>
</sect1>


<!-- Agent -->

<sect1>
	<title>
		Agent
	</title>

	<sect2>
		<title>
			die
		</title>
	
		<para>
<programlisting>
die
</programlisting>
			Destroys an agent.
		</para>
	</sect2>


	<sect2>
		<title>
			is-dead
		</title>
	
		<para>
<programlisting>
is-dead : boolean
</programlisting>
			Returns true if the calling agent is dead.
		</para>
	</sect2>


	<sect2>
		<title>
			all-links
		</title>
	
		<para>
<programlisting>
all-links : List&lt;AbstractLink&gt;
</programlisting>
			Returns all links of this agent.
		</para>
	</sect2>


	<sect2>
		<title>
			link
		</title>
		<para>
<programlisting>
link agent : Link
agent : Agent
		</programlisting>
			'link a' returns a link if the active agent is connected to 'a', 
			or 'null' if there is no link between the active agent and 'a'.
		</para>
	</sect2>



	<sect2>
		<title>
			link-of-type
		</title>
		<para>
<programlisting>
link-of-type link-type
link-type : Link
</programlisting>
				Return a link of the specific type connected to the current agent.
		</para>
	</sect2>



	<sect2>
		<title>
			links-of-type
		</title>
		<para>
<programlisting>
links-of-type link-type
link-type : List&lt;link-type&gt;
</programlisting>
			Returns all links of the given type connected to the current agent.
		</para>
	</sect2>
</sect1>


<!-- AbstractLink -->
<sect1>
	<title>AbstractLink</title>
	<para>
		A base class for all links.
	</para>
	
	<sect2>
		<title>
			connect
		</title>
	
		<para>
<programlisting>
connect end1 end2
end1 : Agent
end2 : Agent
</programlisting>
			Connects two agents with the link.
		</para>
	</sect2>
</sect1>


<!-- Link -->
<sect1>
	<title>Link : AbstractLink</title>
	<para>
		A link class for space agents.
	</para>
	
	<sect2>
		<title>
			color
		</title>
	
		<para>
<programlisting>
color : vector
</programlisting>
			Link's color.
		</para>
	</sect2>


	<sect2>
		<title>
			width
		</title>
	
		<para>
<programlisting>
width : number
</programlisting>
			Link's width (used for visualization only).
		</para>
	</sect2>


	<sect2>
		<title>
			end1
		</title>
	
		<para>
<programlisting>
end1 : SpaceAgent
</programlisting>
			Returns the first end of the link.
		</para>
	</sect2>


	<sect2>
		<title>
			end2
		</title>
	
		<para>
<programlisting>
end2 : SpaceAgent
</programlisting>
			Returns the second end of the link.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			distance
		</title>
	
		<para>
<programlisting>
distance : vector
</programlisting>
			Returns a vector distance between agents connected by the link.
		</para>
	</sect2>

</sect1>


<!-- SpaceAgent -->
<sect1>
	<title>
		SpaceAgent : Agent
	</title>


	<sect2>
		<title>
			move
		</title>
	
		<para>
<programlisting>
move v
v : vector
</programlisting>
			Adds 'v' to the current position and moves the space agent to that new position.
		</para>
	</sect2>


	<sect2>
		<title>
			get-agent-space
		</title>
	
		<para>
<programlisting>
get-agent-space : Space
</programlisting>
			Returns the space in which the space agent is located.
		</para>
	</sect2>


	<sect2>
		<title>
			move-to
		</title>
	
		<para>
<programlisting>
move-to pos
pos : vector
</programlisting>
			Moves the space agent to a new position.
		</para>
	</sect2>



	<sect2>
		<title>
			move-to-space
		</title>
	
		<para>
<programlisting>
move-to-space new-space new-position
new-space : Space
new-position : vector
</programlisting>
			Moves an agent to a given space at a specific position inside that space.
		</para>
	</sect2>


	<sect2>
		<title>
			set-random-position
		</title>
	
		<para>
<programlisting>
set-random-position
</programlisting>
			Moves an agent to a random position inside a space.
		</para>
	</sect2>



	<sect2>
		<title>
			hatch
		</title>
	
		<para>
<programlisting>
hatch type number : Array&lt;type>
type : $type (derived from SpaceAgent)
number : number
</programlisting>
			Creates â€˜numberâ€™ of agents of type â€˜typeâ€™ in the same space as a calling agent
			and at the same position as a calling agent.
		</para>
	</sect2>


	<sect2>
		<title>
			hatch-one
		</title>
		<para>
<programlisting>
hatch-one type : Type of this command equals to â€˜typeâ€™
type : $type (derived from SpaceAgent)
</programlisting>
			Creates one agent of a specific type in the same space as a calling agent
			and at the same position as a calling agent.
			The main difference form the previous command with number = 1 
			is that the type of this command is different.
		</para>
	</sect2>



	<sect2>
		<title>
			position
		</title>
	
		<para>
<programlisting>
position : vector
</programlisting>
			Field 'position' is the position of an agent inside a space. This is
			a read only field. To assign a value to the position use 'move-to' or 'move'
			methods.
		</para>
	</sect2>



	<sect2>
		<title>
			color
		</title>
	
		<para>
<programlisting>
color : vector
</programlisting>
			Field 'color' is the color of a space agent.
		</para>
	</sect2>


	<sect2>
		<title>
			radius
		</title>
	
		<para>
<programlisting>
radius : number
</programlisting>
			Field 'radius' is the size of a space agent.
		</para>
	</sect2>


	<sect2>
		<title>
			label
		</title>
	
		<para>
<programlisting>
label : string
</programlisting>
			Field 'label' of the space agent. Labels of space agents
			could be visualized during a simulation process.
		</para>
	</sect2>


	<sect2>
		<title>
			alpha
		</title>
	
		<para>
<programlisting>
alpha : number
</programlisting>
			Field 'alpha' determines the transparency of the space agent.
			If alpha = 0, then the agent is completely transparent.
			If alpha = 1, then the agent is completely opaque.
		</para>
	</sect2>


	<sect2>
		<title>
			rotation
		</title>
	
		<para>
<programlisting>
rotation : number
</programlisting>
			Rotation of the agent in the xy-plane (measured in degrees).
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			fixed-rotation
		</title>
	
		<para>
<programlisting>
fixed-rotation : boolean (set only)
</programlisting>
			If true, then the physical simulation engine will not attempt to
			rotate the agent. Works only for physical agents.
		</para>
	</sect2>
	

	<sect2>
		<title>
			restitution
		</title>
	
		<para>
<programlisting>
restitution : number
</programlisting>
			Field 'restitution'. Works only for physical agents.
		</para>
	</sect2>


	<sect2>
		<title>
			shape
		</title>
	
		<para>
<programlisting>
shape : ShapeInfo (set only)
</programlisting>
			Field 'shape'. Allows to change agent's shape dynamically.
			Works only for physical agents. See create-circle and create-rect commands
			for examples. 
		</para>
	</sect2>


	<sect2>
		<title>
			update-proxy
		</title>
	
		<para>
<programlisting>
update-proxy
</programlisting>
			A special command for physical agents. In general, should be called
			when a physical agent is moved to a new position with 'move' or 'move-to'
			methods.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			set-collision-category
		</title>
	
		<para>
<programlisting>
set-collision-category category
category : number
</programlisting>
			Sets a collision category of a physical agent. A collision category
			is an integer number from 0 to 15.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			add-collision-category
		</title>
	
		<para>
<programlisting>
add-collision-category category
category : number
</programlisting>
			Adds a collision category to a physical agent. A collision category
			is an integer number from 0 to 15.
		</para>
	</sect2>


	<sect2>
		<title>
			add-collision-mask
		</title>
	
		<para>
<programlisting>
add-collision-mask mask
mask : number
</programlisting>
			Adds a collision mask to a physical agent. A collision mask
			is an integer number from 0 to 15.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			remove-collision-category
		</title>
	
		<para>
<programlisting>
remove-collision-category category
category : number
</programlisting>
			Removes a collision category from a physical agent. A collision category
			is an integer number from 0 to 15.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			remove-collision-mask
		</title>
	
		<para>
<programlisting>
remove-collision-mask
mask : number
</programlisting>
			Removes a collision mask from a physical agent. A collision mask
			is an integer number from 0 to 15.
		</para>
	</sect2>
	

	<sect2>
		<title>
			apply-force
		</title>
	
		<para>
<programlisting>
apply-force force
force : vector
</programlisting>
			Applies the given force to a physical agent.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			apply-impulse
		</title>
	
		<para>
<programlisting>
apply-impulse impulse
impulse : vector
</programlisting>
			Applies the given impulse to a physical agent.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			get-velocity
		</title>
	
		<para>
<programlisting>
get-velocity : vector
</programlisting>
			Returns a velocity vector of a physical agent.
		</para>
	</sect2>
</sect1>



<!--  Grid  -->
<sect1>
	<title>
		grid
	</title>

	<sect2>
		<title>
			max
		</title>
	
		<para>
<programlisting>
max : number
</programlisting>
			Returns the maximum value stored in a grid.
		</para>
	</sect2>


	<sect2>
		<title>
			min
		</title>
	
		<para>
<programlisting>
min : number
</programlisting>
			Returns the minimum value stored in a grid.
		</para>
	</sect2>


	<sect2>
		<title>
			total-value
		</title>
	
		<para>
<programlisting>
total-value : number
</programlisting>
			Returns the sum of all values stored in a grid.
		</para>
	</sect2>


	<sect2>
		<title>
			total-value-in-region
		</title>
	
		<para>
<programlisting>
total-value-in-region x-min x-max y-min y-max : number
x-min : number
x-max : number
y-min : number
y-max : number
</programlisting>
			Returns the sum of all values stored in a grid in a specific region.
		</para>
	</sect2>


	<sect2>
		<title>
			multiply
		</title>
	
		<para>
<programlisting>
multiple coefficient
coefficient : number
</programlisting>
			Multiplies all values in a grid by a given coefficient.
		</para>
	</sect2>


	<sect2>
		<title>
			evaporate
		</title>
	
		<para>
<programlisting>
evaporate coefficient
coefficient : number
</programlisting>
			Multiplies all values in a grid by a given coefficient (this is an alias
			for the 'multiply' method). 
		</para>
	</sect2>


	<sect2>
		<title>
			diffuse
		</title>
	
		<para>
<programlisting>
diffuse coefficient
coefficient : number
</programlisting>
			Performs a diffusion operation on a grid with a given diffusion
			coefficient.
		</para>
		<para>
			The diffusion operation is performed as follows. Each data layer cell shares
			(coefficient * 100) percents of its value with its eight neighbors.
			The coefficient should be between 0 and 1 for a well-defined behavior. 
		</para>
	</sect2>



	<sect2>
		<title>
			set-value
		</title>
	
		<para>
<programlisting>
set-value value
value : number
</programlisting>
			Sets all values in a grid to a given value.
		</para>
	</sect2>



	<sect2>
		<title>
			data-at
		</title>
	
		<para>
<programlisting>
data-at i j : number
i : number
j : number
</programlisting>
			Returns a value in a cell (i, j).
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			set-data-at
		</title>
	
		<para>
<programlisting>
set-data-at i j new-value
i : number
j : number
new-value : number
</programlisting>
			Sets the value of a cell (i, j) to a new value.
		</para>
	</sect2>


	<sect2>
		<title>
			get-xsize
		</title>
	
		<para>
<programlisting>
get-xsize : number
</programlisting>
			Returns the number of cells in a grid along x-axis.
		</para>
	</sect2>
	

	<sect2>
		<title>
			get-ysize
		</title>
	
		<para>
<programlisting>
get-xsize : number
</programlisting>
			Returns the number of cells in a grid along y-axis.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			get-smooth-gradient
		</title>
	
		<para>
<programlisting>
get-smooth-gradient point : vector
point : vector
</programlisting>
			Returns a gradient at the given point.
		</para>
	</sect2>
	
	
	<sect2>
		<title>
			value-at
		</title>
	
		<para>
<programlisting>
value-at pos : number
pos : vector
</programlisting>
				Returns a value corresponding to a given position.
		</para>
	</sect2>


	<sect2>
		<title>
			set-value-at
		</title>
	
		<para>
<programlisting>
set-value-at pos new-value
pos : vector
new-value : number
</programlisting>
			Sets the value of a cell corresponding to a given position.
		</para>
	</sect2>


	<sect2>
		<title>
			add-value-at
		</title>
	
		<para>
<programlisting>
add-value-at pos num
pos : vector
num : number
</programlisting>
			Adds a given number to the value of a cell corresponding to a given position.
		</para>
	</sect2>



	<sect2>
		<title>
			value-here
		</title>
	
		<para>
<programlisting>
value-here : number
</programlisting>
			Returns a value corresponding to the position of a calling space agent.
		</para>
	</sect2>


	<sect2>
		<title>
			set-value-here
		</title>
	
		<para>
<programlisting>
set-value-here new-value
new-value : number
</programlisting>
			Sets the value of a cell corresponding to the position 
			of a calling space agent.
		</para>
	</sect2>


	<sect2>
		<title>
			add-value-here
		</title>
	
		<para>
<programlisting>
add-value-here num
num : number
</programlisting>
			Adds a given number to the value of a cell corresponding to 
			the position of a calling space agent.
		</para>
	</sect2>


	<sect2>
		<title>
			value
		</title>
	
		<para>
<programlisting>
value : number
</programlisting>
			The field 'value' is the value of a cell corresponding to
			the position of a calling space agent.
		</para>
	</sect2>
</sect1>

</article>